points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = min(xm), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = max(xm), xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show(g, 0, 10, iter = 2)
bisection_show(g, 0, 10, iter = 3)
bisection_show(g, 0, 10, iter = 4)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = min(xl), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = xr, xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = xl[iter], ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = xr, xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = min(xl), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = max(xm), xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show(g, 0, 10, iter = 2)
bisection_show(g, 0, 10, iter = 3)
bisection_show(g, 0, 10, iter = 4)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
if (iter = 1) {
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
if (iter == 1) {
xl_iter <- 1
} else {
xl_iter <- iter - 1
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = xl[xl_iter], ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = xm[f_points], xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
if (iter == 1) {
xl_iter <- 1
} else {
xl_iter <- iter - 1
}
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = xl[xl_iter], ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = xm[f_point], xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show(g, 0, 10, iter = 2)
bisection_show(g, 0, 10, iter = 3)
bisection_show(g, 0, 10, iter = 4)
bisection_show <- function(f, x0, x1, tolerance = 1e-5, iter = 1) {
x_l <- x0
x_r <- x1
starting_points <- c(x_l, x_r)
iter_count <- 0
xr = numeric(0)
xl = numeric(0)
xm = numeric(0)
fpoint = logical(0)
points = numeric(0)
points <- c(points, x_l, x_r)
while(x_r - x_l > tolerance & iter_count < iter) {
x_m <- (x_l + x_r) / 2
xm <- c(xm, x_m)
f_m <- f(x_m)
f_l <- f(x_l)
if (identical(all.equal(f_m, 0), TRUE)) {
break
}
if (f_l * f_m < 0) {
fpoint <- c(fpoint, TRUE)
x_r <- x_m
points <- c(points, x_r)
xr <- c(xr, x_r)
} else {
fpoint <- c(fpoint, FALSE)
x_l <- x_m
points <- c(points, x_l)
xl <- c(xl, x_l)
}
iter_count <- iter_count + 1
print((x_l + x_r) / 2)
}
x <- seq(min(starting_points) - 1, max(starting_points) + 1, length.out = 200)
fx <- rep(NA, length(x))
for (i in 1:length(x)) {
fx[i] <- f(x[i])
}
data <- data.frame(x, fx)
if (fpoint[iter]) {
f_point <- xl[iter]
f_point_2 <- xr
} else {
f_point <- xm[iter]
f_point_2 <- xl
}
if (iter == 1) {
xl_iter <- 1
} else {
xl_iter <- iter - 1
}
xm_point <- xm[f_point]
xm_point
suppressWarnings(p <- ggplot(data, aes(x = x, y = fx)) +
geom_line(color = "royalblue", size = 1) +
geom_vline(xintercept = points, color = "red", lty = 2, data = df) +
geom_rect(aes(xmin = min(points), xmax = xl[xl_iter], ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
geom_rect(aes(xmin = xm[f_point], xmax = max(points), ymin = -Inf, ymax = Inf),
alpha = 0.01, fill = "gray") +
theme_bw())
print(p)
print(xr)
print(xl)
print(xm)
print(fpoint)
print(points)
}
g <- function(x) x^2 - 50
bisection_show(g, 0, 10)
bisection_show(g, 0, 10, iter = 2)
bisection_show(g, 0, 10, iter = 3)
bisection_show(g, 0, 10, iter = 4)
bestselling_books <- read.csv("bestselling_books.csv")
setwd("C:/Users/Cynthia/Desktop/DH 199/DH199/tutorial")
bestselling_books <- read.csv("bestselling_books.csv")
View(bestselling_books)
?plotOutput()
